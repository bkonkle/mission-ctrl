{"version":3,"sources":["../../../src/workers/transpiler/index.js"],"names":[],"mappings":";;;;QAcgB;QAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1BhB,IAAM,MAAM,uBAAa,oBAAb,CAAN;;AAEC,IAAM,sBAAO,kDAA8B,YAA9B,CAAP;;AAEN,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AAC/B,MAAI,KAAJ,CAAU,qBAAV,EAD+B;;AAG/B,MAAM,SAAS,uBAAT,CAHyB;AAI/B,MAAM,YAAY,gBAAK,eAAK,IAAL,CAAU,OAAO,MAAP,EAAe,OAAO,IAAP,CAA9B,CAAZ,CAJyB;;AAM/B,UAAQ,IAAR,CAAa,kDAAb,EAN+B;AAO/B,QAAM,QAAN,CAAe,uBAAW,IAAX,CAAf,EAP+B;;AAS/B,6BAAe;AACb,aAAS,OAAO,MAAP;AACT,wBAFa;AAGb,YAAQ,OAAO,IAAP;AACR,gBAAY,IAAZ;GAJF,EAT+B;;AAgB/B,MAAI,KAAJ,CAAU,oBAAV,EAhB+B;;AAkB/B,QAAM,QAAN,CAAe,uBAAW,KAAX,CAAf,EAlB+B;AAmB/B,UAAQ,IAAR,CAAa,mDAAb,EAnB+B;CAA1B;;AAsBA,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AAClC,MAAI,KAAJ,CAAU,eAAV,EADkC;;AAGlC,MAAM,QAAQ,MAAM,QAAN,EAAR,CAH4B;;AAKlC,UAAQ,MAAM,UAAN,CAAiB,GAAjB,CAAqB,MAArB,CAAR;AACE;AACE,UAAI,CAAC,MAAM,UAAN,CAAiB,GAAjB,CAAqB,YAArB,CAAD,EAAqC;AACvC,kBAAU,KAAV,EADuC;OAAzC;AAGA,YAJF;AADF;;GALkC;CAA7B","file":"index.js","sourcesContent":["import {GOAL_TRANSPILE} from 'state/foreman'\nimport {inProgress} from 'workers/transpiler/state'\nimport {sync as glob} from 'glob'\nimport {transpileToDir} from 'utils/babel'\nimport {workerInit} from 'workers/utils'\nimport {workerReady, workerBusy, WORKER_TRANSPILER} from 'workers/state'\nimport createLogger from 'utils/logging'\nimport getConfig from 'utils/config'\nimport path from 'path'\n\nconst log = createLogger('workers/transpiler')\n\nexport const init = workerInit(WORKER_TRANSPILER, stateChanged)\n\nexport function transpile(store) {\n  log.debug('Beginning transpile')\n\n  const config = getConfig()\n  const filenames = glob(path.join(config.source, config.glob))\n\n  process.send(workerBusy(WORKER_TRANSPILER))\n  store.dispatch(inProgress(true))\n\n  transpileToDir({\n    baseDir: config.source,\n    filenames,\n    outDir: config.dest,\n    sourceMaps: true,\n  })\n\n  log.debug('Transpile complete')\n\n  store.dispatch(inProgress(false))\n  process.send(workerReady(WORKER_TRANSPILER))\n}\n\nexport function stateChanged(store) {\n  log.debug('State changed')\n\n  const state = store.getState()\n\n  switch (state.transpiler.get('goal')) {\n    case GOAL_TRANSPILE:\n      if (!state.transpiler.get('inProgress')) {\n        transpile(store)\n      }\n      break\n    default:\n      // Do nothing\n  }\n}\n"]}
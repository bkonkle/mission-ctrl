{"version":3,"sources":["../src/foreman.js"],"names":[],"mappings":";;;QAWgB;QAkBA;QAYA;;;;;;;;;;;;;;;;;;;;;;;;;;AAhChB,IAAM,MAAM,uBAAa,SAAb,CAAN;;AAEC,SAAS,IAAT,CAAc,aAAd,EAA6B;;;AAClC,MAAM,QAAQ,iBAAiB,sBAAjB,CADoB;;AAGlC,MAAM,kEACiB,WAAW,YAAX,YADjB,CAH4B;;AAOlC,qBAAO,OAAP,EAAgB,OAAhB,CAAwB,kBAAU;AAChC,WAAO,EAAP,CAAU,SAAV,EAAqB;aAAU,MAAM,QAAN,CAAe,MAAf;KAAV,CAArB,CADgC;GAAV,CAAxB,CAPkC;;AAWlC,QAAM,SAAN,CAAgB,kBAAkB,IAAlB,CAAuB,IAAvB,EAA6B,KAA7B,EAAoC,OAApC,CAAhB,EAXkC;;AAalC,MAAI,KAAJ,CAAU,0BAAV,EAbkC;;AAelC,QAAM,QAAN,CAAe,8CAAf,EAfkC;CAA7B;;AAkBA,SAAS,UAAT,CAAoB,MAApB,EAA4B;AACjC,MAAM,aAAa,eAAK,OAAL,CACjB,eAAK,IAAL,CAAU,SAAV,EAAqB,SAArB,EAAmC,cAAnC,CADiB,CAAb,CAD2B;AAIjC,SAAO,wBAAa,IAAb,CAAkB,UAAlB,EAA8B,QAAQ,IAAR,CAAa,KAAb,CAAmB,CAAnB,CAA9B,EAAqD;AAC1D,SAAK;AACH,iBAAc,QAAQ,GAAR,CAAY,SAAZ,SAAyB,SAAvC;AACA,mBAAa,IAAb;KAFF;GADK,CAAP,CAJiC;CAA5B;;AAYA,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,OAAlC,EAA2C;AAChD,MAAI,KAAJ,CAAU,eAAV,EADgD;;AAGhD,MAAM,QAAQ,MAAM,QAAN,EAAR,CAH0C;;AAKhD,UAAQ,MAAM,OAAN,CAAc,GAAd,CAAkB,MAAlB,CAAR;AACE;AACE,UAAI,MAAM,OAAN,CAAc,KAAd,CAAoB,8BAAoB,QAApB,CAApB,4BAAJ,EAAyE;AACvE,YAAI,KAAJ,CAAU,wBAAV,EADuE;AAEvE,6CAA2B,IAA3B,CAAgC,wBAAhC,EAFuE;OAAzE;AAIA,YALF;AADF;AAQI,YAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN,CADF;AAPF,GALgD;CAA3C","file":"foreman.js","sourcesContent":["import {getStore} from 'state/store'\nimport {setGoal, GOAL_TRANSPILE} from 'state/foreman'\nimport {start as startTranspiler} from 'state/transpiler'\nimport {STATUS_READY, WORKER_TRANSPILER} from 'state/workers'\nimport {values} from 'ramda'\nimport childProcess from 'child_process'\nimport createLogger from 'utils/logging'\nimport path from 'path'\n\nconst log = createLogger('foreman')\n\nexport function init(storeOverride) {\n  const store = storeOverride || getStore()\n\n  const workers = {\n    [WORKER_TRANSPILER]: forkWorker('transpiler'),\n  }\n\n  values(workers).forEach(worker => {\n    worker.on('message', action => store.dispatch(action))\n  })\n\n  store.subscribe(handleStateChange.bind(null, store, workers))\n\n  log.debug('Successfully initialized')\n\n  store.dispatch(setGoal(GOAL_TRANSPILE))\n}\n\nexport function forkWorker(worker) {\n  const workerPath = path.resolve(\n    path.join(__dirname, 'workers', `${worker}.js`)\n  )\n  return childProcess.fork(workerPath, process.argv.slice(2), {\n    env: {\n      NODE_PATH: `${process.env.NODE_PATH}:${__dirname}`,\n      FORCE_COLOR: true,\n    },\n  })\n}\n\nexport function handleStateChange(store, workers) {\n  log.debug('State changed')\n\n  const state = store.getState()\n\n  switch (state.foreman.get('goal')) {\n    case GOAL_TRANSPILE:\n      if (state.workers.getIn([WORKER_TRANSPILER, 'status']) === STATUS_READY) {\n        log.debug('Starting transpilation')\n        workers[WORKER_TRANSPILER].send(startTranspiler())\n      }\n      break\n    default:\n      throw new Error('Foreman has no goal')\n  }\n}\n"]}
{"version":3,"sources":["../src/foreman.test.js"],"names":[],"mappings":"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","file":"foreman.test.js","sourcesContent":["import {expect} from 'chai'\nimport {fromJS} from 'immutable'\nimport {mockStore} from 'utils/test'\nimport {ready, STATUS_READY, WORKER_TRANSPILER} from 'state/workers'\nimport {setGoal, GOAL_TRANSPILE} from 'state/foreman'\nimport {start as startTranspiler} from 'state/transpiler'\nimport path from 'path'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\ndescribe('foreman', () => {\n\n  const forkStub = sinon.stub()\n\n  const foreman = proxyquire('./foreman', {\n    'child_process': {fork: forkStub},\n  })\n\n  afterEach(() => {\n    forkStub.reset()\n  })\n\n  describe('init()', () => {\n\n    let callback\n\n    before(() => {\n      forkStub.returns({\n        on: (event, cb) => {\n          callback = cb\n        },\n      })\n    })\n\n    it('spawns a transpiler worker', () => {\n      foreman.init()\n      expect(forkStub).to.have.been.calledWith(require.resolve('workers/transpiler'))\n    })\n\n    it('dispatches actions from worker messages', done => {\n      const store = mockStore({}, [\n        setGoal(GOAL_TRANSPILE),\n        ready('transpiler'),\n      ], done)\n      store.subscribe = () => {}\n\n      foreman.init(store)\n\n      callback(ready('transpiler'))\n    })\n\n    it('subscribes to state changes', done => {\n      const store = mockStore({}, [\n        setGoal(GOAL_TRANSPILE),\n      ], done)\n\n      store.subscribe = sinon.spy()\n\n      foreman.init(store)\n\n      expect(store.subscribe).to.have.been.calledOnce\n      expect(store.subscribe.firstCall.args[0]).to.have.property('name', 'bound stateChanged')\n    })\n\n    it('dispatches an initial GOAL_TRANSPILE', done => {\n      const store = mockStore({}, [\n        setGoal(GOAL_TRANSPILE),\n      ], done)\n      store.subscribe = () => {}\n\n      foreman.init(store)\n    })\n\n  })\n\n  describe('forkWorker()', () => {\n\n    it('calls child_process.fork on the requested worker', () => {\n      const worker = {}\n      const workerName = 'whip-creamer'\n      const workerPath = path.resolve(\n        path.join(__dirname, 'workers', `${workerName}.js`)\n      )\n      forkStub.returns(worker)\n\n      const result = foreman.forkWorker(workerName)\n\n      expect(forkStub).to.be.calledWith(workerPath)\n      expect(result).to.equal(worker)\n    })\n\n  })\n\n  describe('stateChanged()', () => {\n\n    it('throws an error if there is no goal', () => {\n      const sendSpy = sinon.spy()\n      const store = {getState: () => ({foreman: fromJS({goal: null})})}\n      const workers = {[WORKER_TRANSPILER]: {send: sendSpy}}\n\n      expect(\n        () => foreman.stateChanged(store, workers)\n      ).to.throw(Error)\n    })\n\n    it('starts transpilation if that is the goal', () => {\n      const sendSpy = sinon.spy()\n      const store = {getState: () => ({\n        foreman: fromJS({goal: GOAL_TRANSPILE}),\n        workers: fromJS({[WORKER_TRANSPILER]: {status: STATUS_READY}}),\n      })}\n      const workers = {[WORKER_TRANSPILER]: {send: sendSpy}}\n\n      foreman.stateChanged(store, workers)\n\n      expect(sendSpy).to.be.calledWith(startTranspiler())\n    })\n\n  })\n\n})\n"]}
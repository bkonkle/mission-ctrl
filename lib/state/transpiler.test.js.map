{"version":3,"sources":["../../src/state/transpiler.test.js"],"names":[],"mappings":";;;;;;;;IAEY;;;;AACZ,IAAM,UAAU,WAAW,OAAX;;AAEhB,SAAS,kBAAT,EAA6B,YAAM;;AAEjC,WAAS,SAAT,EAAoB,YAAM;;AAExB,OAAG,wDAAH,EAA6D,YAAM;AACjE,UAAM,SAAS,WAAW,MAAX,EAAT,CAD2D;AAEjE,UAAM,eAAe,uBAAO,EAAC,QAAQ,WAAW,kBAAX,EAAhB,CAAf,CAF2D;AAGjE,UAAM,WAAW,uBAAO,EAAC,QAAQ,WAAW,WAAX,EAAhB,CAAX,CAH2D;;AAKjE,UAAM,SAAS,QAAQ,YAAR,EAAsB,MAAtB,CAAT,CAL2D;;AAOjE,wBAAO,MAAP,EAAe,EAAf,CAAkB,KAAlB,CAAwB,QAAxB,EAPiE;KAAN,CAA7D,CAFwB;;AAYxB,OAAG,2DAAH,EAAgE,YAAM;AACpE,UAAM,SAAS,WAAW,KAAX,EAAT,CAD8D;AAEpE,UAAM,eAAe,uBAAO,EAAC,QAAQ,WAAW,WAAX,EAAhB,CAAf,CAF8D;AAGpE,UAAM,WAAW,uBAAO,EAAC,QAAQ,WAAW,eAAX,EAAhB,CAAX,CAH8D;;AAKpE,UAAM,SAAS,QAAQ,YAAR,EAAsB,MAAtB,CAAT,CAL8D;;AAOpE,wBAAO,MAAP,EAAe,EAAf,CAAkB,KAAlB,CAAwB,QAAxB,EAPoE;KAAN,CAAhE,CAZwB;;AAsBxB,OAAG,gEAAH,EAAqE,YAAM;AACzE,UAAM,SAAS,WAAW,OAAX,EAAT,CADmE;AAEzE,UAAM,eAAe,uBAAO,EAAC,QAAQ,WAAW,eAAX,EAAhB,CAAf,CAFmE;AAGzE,UAAM,WAAW,uBAAO,EAAC,QAAQ,WAAW,kBAAX,EAAhB,CAAX,CAHmE;;AAKzE,UAAM,SAAS,QAAQ,YAAR,EAAsB,MAAtB,CAAT,CALmE;;AAOzE,wBAAO,MAAP,EAAe,EAAf,CAAkB,KAAlB,CAAwB,QAAxB,EAPyE;KAAN,CAArE,CAtBwB;GAAN,CAApB,CAFiC;CAAN,CAA7B","file":"transpiler.test.js","sourcesContent":["import {expect} from 'chai'\nimport {fromJS} from 'immutable'\nimport * as transpiler from './transpiler'\nconst reducer = transpiler.default\n\ndescribe('state/transpiler', () => {\n\n  describe('reducer', () => {\n\n    it('handles FINISH events by setting status to STATUS_IDLE', () => {\n      const action = transpiler.finish()\n      const initialState = fromJS({status: transpiler.STATUS_IN_PROGRESS})\n      const expected = fromJS({status: transpiler.STATUS_IDLE})\n\n      const result = reducer(initialState, action)\n\n      expect(result).to.equal(expected)\n    })\n\n    it('handles START events by setting status to STATUS_STARTING', () => {\n      const action = transpiler.start()\n      const initialState = fromJS({status: transpiler.STATUS_IDLE})\n      const expected = fromJS({status: transpiler.STATUS_STARTING})\n\n      const result = reducer(initialState, action)\n\n      expect(result).to.equal(expected)\n    })\n\n    it('handles STARTED events by setting status to STATUS_IN_PROGRESS', () => {\n      const action = transpiler.started()\n      const initialState = fromJS({status: transpiler.STATUS_STARTING})\n      const expected = fromJS({status: transpiler.STATUS_IN_PROGRESS})\n\n      const result = reducer(initialState, action)\n\n      expect(result).to.equal(expected)\n    })\n\n  })\n\n})\n"]}
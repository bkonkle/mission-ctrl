{"version":3,"sources":["../src/foreman.js"],"names":[],"mappings":";;;QAQgB;;;;;;;;;;;;;;;;;;;;AAFhB,IAAM,MAAM,uBAAa,SAAb,CAAN;;AAEC,SAAS,IAAT,CAAc,KAAd,EAAqB;aACP,SAAS,sBAAT,CADO;;MACnB,yBADmB;;AAG1B,MAAM,UAAU;AACd,cAAU,IAAI,2BAAQ,MAAR,mBAAJ,CAAV;GADI,CAHoB;;AAO1B,MAAM,iBAAiB,SAAjB,cAAiB;WAAU,SAAS,MAAT;GAAV,CAPG;AAQ1B,qBAAO,OAAP,EAAgB,OAAhB,CAAwB,kBAAU;AAChC,WAAO,SAAP,GAAmB,cAAnB,CADgC;GAAV,CAAxB,CAR0B;;AAY1B,MAAI,KAAJ,CAAU,mCAAV,EAZ0B;CAArB;;AAeP,IAAI,QAAQ,IAAR,KAAiB,MAAjB,EAAyB;AAC3B,SAD2B;CAA7B","file":"foreman.js","sourcesContent":["import {getStore} from 'state/store'\nimport {values} from 'ramda'\nimport compiler from 'workers/compiler'\nimport createLogger from 'utils/logging'\nimport Threads from 'webworker-threads'\n\nconst log = createLogger('foreman')\n\nexport function init(store) {\n  const {dispatch} = store || getStore()\n\n  const workers = {\n    compiler: new Threads.Worker(compiler),\n  }\n\n  const dispatchAction = action => dispatch(action)\n  values(workers).forEach(worker => {\n    worker.onmessage = dispatchAction\n  })\n\n  log.debug('Foreman successfully initialized.')\n}\n\nif (require.main === module) {\n  init()\n}\n"]}
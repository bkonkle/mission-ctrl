{"version":3,"sources":["../../src/utils/babel.js"],"names":[],"mappings":";;;QAkBgB;QA0BA;;;;;;;;;;;;;;;;;;;;;;;;AArChB,IAAM,MAAM,uBAAa,aAAb,CAAN;;;;;;;;;;;AAWC,SAAS,SAAT,OAAoE;MAAhD,uBAAgD;4BAAvC,UAAuC;MAAvC,2CAAY,uBAA2B;MAApB,qBAAoB;MAAZ,2BAAY;;AACzE,YAAU,OAAV,CAAkB,oBAAY;;AAE5B,QAAM,WAAW,eAAK,QAAL,CAAc,OAAd,EAAuB,SAAS,OAAT,CAAiB,WAAjB,EAA8B,EAA9B,IAAoC,KAApC,CAAlC,CAFsB;;AAI5B,QAAM,OAAO,eAAK,IAAL,CAAU,MAAV,EAAkB,QAAlB,CAAP,CAJsB;;AAM5B,QAAM,OAAO,kCAAkB,QAAlB,EAA4B;AACvC,sBAAgB,qBAAM,eAAK,QAAL,CAAc,OAAO,KAAP,EAAc,QAA5B,CAAN,CAAhB;AACA,uBAAiB,eAAK,QAAL,CAAc,QAAd,CAAjB;KAFW,CAAP,CANsB;AAU5B,QAAI,CAAC,SAAD,IAAc,KAAK,OAAL,EAAc,OAAhC;;;AAV4B,QAatB,SAAS,OAAO,MAAP,CAba;AAc5B,SAAK,IAAL,GAAY,oBAAoB,KAAK,IAAL,EAAW,MAA/B,CAAZ,CAd4B;AAe5B,2BAAc,MAAd,EAAsB,KAAK,SAAL,CAAe,KAAK,GAAL,CAArC;;;AAf4B,0BAkB5B,CAAc,IAAd,EAAoB,KAAK,IAAL,CAApB,CAlB4B;AAmB5B,iBAAG,SAAH,CAAa,IAAb,EAAmB,aAAG,QAAH,CAAY,QAAZ,EAAsB,IAAtB,CAAnB,CAnB4B;;AAqB5B,QAAI,KAAJ,CAAU,WAAW,MAAX,GAAoB,IAApB,CAAV,CArB4B;GAAZ,CAAlB,CADyE;CAApE;;AA0BA,SAAS,mBAAT,CAA6B,IAA7B,EAAmC,GAAnC,EAAwC;AAC7C,SAAO,OAAO,yBAAP,GAAmC,eAAK,QAAL,CAAc,GAAd,CAAnC,CADsC;CAAxC","file":"babel.js","sourcesContent":["import {outputToMemFs} from 'utils/fs'\nimport {transformFileSync} from 'babel-core'\nimport createLogger from 'utils/logging'\nimport fs from 'fs'\nimport path from 'path'\nimport slash from 'slash'\n\nconst log = createLogger('utils/babel')\n\n/**\n * Compiles the given filenames to the destination\n *\n * @param {String} options.baseDir - the base directory for relative paths\n * @param {Boolean} [options.copyFiles] - whether to copy files to the\n *   destination that weren't transformed by Babel, defaults to false\n * @param {String} options.outDir - the destination directory\n * @param {Array} options.filenames - an array of filenames to transform\n */\nexport function transpile({baseDir, copyFiles = false, outDir, filenames}) {\n  filenames.forEach(filename => {\n    // remove extension and then append back on .js\n    const relative = path.relative(baseDir, filename.replace(/\\.(\\w*?)$/, '') + '.js')\n\n    const dest = path.join(outDir, relative)\n\n    const data = transformFileSync(filename, {\n      sourceFileName: slash(path.relative(dest + '/..', filename)),\n      sourceMapTarget: path.basename(relative),\n    })\n    if (!copyFiles && data.ignored) return\n\n    // Output source map\n    const mapLoc = dest + '.map'\n    data.code = addSourceMappingUrl(data.code, mapLoc)\n    outputToMemFs(mapLoc, JSON.stringify(data.map))\n\n    // Output transpiled file\n    outputToMemFs(dest, data.code)\n    fs.chmodSync(dest, fs.statSync(filename).mode)\n\n    log.debug(filename + ' -> ' + dest)\n  })\n}\n\nexport function addSourceMappingUrl(code, loc) {\n  return code + '\\n//# sourceMappingURL=' + path.basename(loc)\n}\n"]}
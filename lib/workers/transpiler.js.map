{"version":3,"sources":["../../src/workers/transpiler.js"],"names":[],"mappings":";;;QAUgB;QAeA;QAgBA;;;;;;;;;;;;IArCJ;;;;;;;;;;;;;;AAIZ,IAAM,MAAM,uBAAa,oBAAb,CAAN;;AAEC,SAAS,IAAT,GAAgB;AACrB,MAAM,QAAQ,sBAAR,CADe;;AAGrB,QAAM,SAAN,CAAgB;WAAM,aAAa,IAAb,CAAkB,IAAlB,EAAwB,KAAxB;GAAN,CAAhB,CAHqB;;AAKrB,UAAQ,EAAR,CAAW,SAAX,EAAsB,mBAAW;AAC/B,QAAI,KAAJ,CAAU,mBAAV,EAA+B,QAAQ,IAAR,CAA/B,CAD+B;AAE/B,UAAM,QAAN,CAAe,OAAf,EAF+B;GAAX,CAAtB,CALqB;;AAUrB,UAAQ,IAAR,CAAa,+CAAb,EAVqB;;AAYrB,MAAI,KAAJ,CAAU,0BAAV,EAZqB;CAAhB;;AAeA,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AAC/B,MAAM,SAAS,uBAAT,CADyB;AAE/B,MAAM,YAAY,gBAAK,OAAO,MAAP,CAAjB,CAFyB;;AAI/B,UAAQ,IAAR,CAAa,8CAAb,EAJ+B;AAK/B,QAAM,QAAN,CAAe,WAAW,OAAX,EAAf,EAL+B;;AAO/B,6BAAe;AACb,YAAQ,OAAO,MAAP;AACR,gBAAY,IAAZ;GAFF,EAGG,SAHH,EAP+B;;AAY/B,QAAM,QAAN,CAAe,WAAW,MAAX,EAAf,EAZ+B;AAa/B,UAAQ,IAAR,CAAa,+CAAb,EAb+B;CAA1B;;AAgBA,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AAClC,MAAM,QAAQ,MAAM,QAAN,EAAR,CAD4B;;AAGlC,UAAQ,MAAM,UAAN,CAAiB,GAAjB,CAAqB,QAArB,CAAR;AACE,SAAK,WAAW,eAAX;AACH,gBAAU,KAAV,EADF;AAEE,YAFF;AADF,SAIO,WAAW,kBAAX;AACH,YAAM,IAAI,KAAJ,CAAU,mDAAV,CAAN,CADF;AAJF;;GAHkC;CAA7B;;AAcP","file":"transpiler.js","sourcesContent":["import {getStore} from 'state/store'\nimport {ready, busy, WORKER_TRANSPILER} from 'state/workers'\nimport {sync as glob} from 'glob'\nimport {transpileToDir} from 'utils/babel'\nimport * as transpiler from 'state/transpiler'\nimport createLogger from 'utils/logging'\nimport getConfig from 'utils/config'\n\nconst log = createLogger('workers/transpiler')\n\nexport function init() {\n  const store = getStore()\n\n  store.subscribe(() => stateChanged.bind(null, store))\n\n  process.on('message', message => {\n    log.debug('Message received:', message.type)\n    store.dispatch(message)\n  })\n\n  process.send(ready(WORKER_TRANSPILER))\n\n  log.debug('Successfully initialized')\n}\n\nexport function transpile(store) {\n  const config = getConfig()\n  const filenames = glob(config.source)\n\n  process.send(busy(WORKER_TRANSPILER))\n  store.dispatch(transpiler.started())\n\n  transpileToDir({\n    outDir: config.outDir,\n    sourceMaps: true,\n  }, filenames)\n\n  store.dispatch(transpiler.finish())\n  process.send(ready(WORKER_TRANSPILER))\n}\n\nexport function stateChanged(store) {\n  const state = store.getState()\n\n  switch (state.transpiler.get('status')) {\n    case transpiler.STATUS_STARTING:\n      transpile(store)\n      break\n    case transpiler.STATUS_IN_PROGRESS:\n      throw new Error('Not sure if this can ever happen... now you know!')\n    default:\n      // Do nothing\n  }\n}\n\ninit()\n"]}
{"version":3,"sources":["../../src/workers/utils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIA,IAAM,MAAM,uBAAa,eAAb,CAAN;;AAEC,IAAM,kCAAa,SAAb,UAAa,CAAC,MAAD,EAAS,YAAT;SAA0B,YAAM;AACxD,QAAM,QAAQ,sBAAR,CADkD;;AAGxD,UAAM,SAAN,CAAgB,aAAa,IAAb,CAAkB,IAAlB,EAAwB,KAAxB,CAAhB,EAHwD;;AAKxD,YAAQ,EAAR,CAAW,SAAX,EAAsB,mBAAW;AAC/B,UAAI,KAAJ,2BAAkC,gBAAW,QAAQ,IAAR,CAA7C,CAD+B;AAE/B,YAAM,QAAN,CAAe,OAAf,EAF+B;KAAX,CAAtB,CALwD;;AAUxD,YAAQ,IAAR,CAAa,wBAAY,MAAZ,CAAb,EAVwD;;AAYxD,QAAI,KAAJ,aAAoB,oCAApB,EAZwD;GAAN;CAA1B","file":"utils.js","sourcesContent":["import {getStore} from 'state/store'\nimport {workerReady} from 'workers/state'\nimport createLogger from 'utils/logging'\n\nconst log = createLogger('workers/utils')\n\nexport const workerInit = (worker, stateChanged) => () => {\n  const store = getStore()\n\n  store.subscribe(stateChanged.bind(null, store))\n\n  process.on('message', message => {\n    log.debug(`Message received for ${worker}: ${message.type}`)\n    store.dispatch(message)\n  })\n\n  process.send(workerReady(worker))\n\n  log.debug(`Worker ${worker} successfully initialized`)\n}\n"]}
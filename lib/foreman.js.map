{"version":3,"sources":["../src/foreman.js"],"names":[],"mappings":";;;QAYgB;QAqBA;QASA;;;;;;;;;;;;;;IArCJ;;;;;;;;;;;;;;;;;;AAKZ,IAAM,MAAM,uBAAa,SAAb,CAAN;;AAEC,SAAS,IAAT,CAAc,aAAd,EAA6B;;;AAClC,MAAM,QAAQ,iBAAiB,sBAAjB,CADoB;;AAGlC,MAAM,yCACH,QAAQ,iBAAR,IAA4B,WAAW,YAAX,cADzB,CAH4B;;AAOlC,qBAAO,SAAP,EAAkB,OAAlB,CAA0B,kBAAU;AAClC,WAAO,EAAP,CAAU,SAAV,EAAqB,mBAAW;AAC9B,UAAI,KAAJ,CAAU,mBAAV,EAA+B,QAAQ,IAAR,CAA/B,CAD8B;AAE9B,YAAM,QAAN,CAAe,OAAf,EAF8B;KAAX,CAArB,CADkC;GAAV,CAA1B,CAPkC;;AAclC,QAAM,SAAN,CAAgB,aAAa,IAAb,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,SAA/B,CAAhB,EAdkC;;AAgBlC,MAAI,KAAJ,CAAU,0BAAV,EAhBkC;;AAkBlC,QAAM,QAAN,CAAe,8CAAf,EAlBkC;CAA7B;;AAqBA,SAAS,UAAT,CAAoB,MAApB,EAA4B;AACjC,MAAM,aAAa,eAAK,OAAL,CACjB,eAAK,IAAL,CAAU,SAAV,EAAqB,SAArB,EAAmC,oBAAnC,CADiB,CAAb,CAD2B;AAIjC,SAAO,wBAAa,IAAb,CAAkB,UAAlB,YAAkC,QAAQ,IAAR,CAAa,KAAb,CAAmB,CAAnB,IAAuB,WAAzD,EAAqE;AAC1E,SAAK,EAAC,WAAc,QAAQ,GAAR,CAAY,SAAZ,SAAyB,SAAvC,EAAN;GADK,CAAP,CAJiC;CAA5B;;AASA,SAAS,YAAT,CAAsB,KAAtB,EAA6B,SAA7B,EAAwC;AAC7C,MAAI,KAAJ,CAAU,eAAV,EAD6C;;AAG7C,MAAM,QAAQ,MAAM,QAAN,EAAR,CAHuC;;AAK7C,UAAQ,MAAM,OAAN,CAAc,GAAd,CAAkB,MAAlB,CAAR;AACE;AACE,cAAQ,MAAM,OAAN,CAAc,KAAd,CAAoB,CAAC,QAAQ,iBAAR,EAA2B,QAA5B,CAApB,CAAR;AACE,aAAK,QAAQ,KAAR;AACH,cAAI,KAAJ,CAAU,wBAAV,EADF;AAEE,oBAAU,QAAQ,iBAAR,CAAV,CAAqC,IAArC,CACE,6CADF,EAFF;AAKE,gBALF;AADF,aAOO,QAAQ,IAAR;AACH,gBAAM,QAAN,CAAe,yCAAf,EADF;AAEE,gBAFF;AAPF,aAUO,QAAQ,OAAR;;AAEH,gBAFF;AAVF;AAcI,gBAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN,CADF;AAbF,OADF;AAiBE,YAjBF;AADF,2BAmBE;AACE,cAAQ,MAAM,OAAN,CAAc,KAAd,CAAoB,CAAC,QAAQ,aAAR,EAAuB,QAAxB,CAApB,CAAR;AACE,aAAK,QAAQ,KAAR;AACH,cAAI,KAAJ,CAAU,iBAAV,EADF;AAEE,oBAAU,QAAQ,aAAR,CAAV,CAAiC,IAAjC,CAAsC,uCAAtC,EAFF;AAGE,gBAHF;AADF,aAKO,QAAQ,IAAR;;AAEH,gBAFF;AALF,aAQO,QAAQ,OAAR;;AAEH,gBAFF;AARF;AAYI,gBAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN,CADF;AAXF,OADF;AAeE,YAfF;AAnBF;AAoCI,YAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN,CADF;AAnCF,GAL6C;CAAxC","file":"foreman.js","sourcesContent":["import {getStore} from 'state/store'\nimport {setGoal as setLinterGoal} from 'workers/linter/state'\nimport {setGoal as setTranspilerGoal} from 'workers/transpiler/state'\nimport {setGoal, GOAL_TRANSPILE, GOAL_LINT} from 'state/foreman'\nimport {values} from 'ramda'\nimport * as workers from 'workers/state'\nimport childProcess from 'child_process'\nimport createLogger from 'utils/logging'\nimport path from 'path'\n\nconst log = createLogger('foreman')\n\nexport function init(storeOverride) {\n  const store = storeOverride || getStore()\n\n  const processes = {\n    [workers.WORKER_TRANSPILER]: forkWorker('transpiler'),\n  }\n\n  values(processes).forEach(worker => {\n    worker.on('message', message => {\n      log.debug('Message received:', message.type)\n      store.dispatch(message)\n    })\n  })\n\n  store.subscribe(stateChanged.bind(null, store, processes))\n\n  log.debug('Successfully initialized')\n\n  store.dispatch(setGoal(GOAL_TRANSPILE))\n}\n\nexport function forkWorker(worker) {\n  const workerPath = path.resolve(\n    path.join(__dirname, 'workers', `${worker}/index.js`)\n  )\n  return childProcess.fork(workerPath, [...process.argv.slice(2), '--color'], {\n    env: {NODE_PATH: `${process.env.NODE_PATH}:${__dirname}`},\n  })\n}\n\nexport function stateChanged(store, processes) {\n  log.debug('State changed')\n\n  const state = store.getState()\n\n  switch (state.foreman.get('goal')) {\n    case GOAL_TRANSPILE:\n      switch (state.workers.getIn([workers.WORKER_TRANSPILER, 'status'])) {\n        case workers.READY:\n          log.debug('Starting transpilation')\n          processes[workers.WORKER_TRANSPILER].send(\n            setTranspilerGoal(GOAL_TRANSPILE)\n          )\n          break\n        case workers.DONE:\n          store.dispatch(setGoal(GOAL_LINT))\n          break\n        case workers.OFFLINE:\n          // Do nothing, since the process is still initializing\n          break\n        default:\n          throw new Error('Unexpected state reached.')\n      }\n      break\n    case GOAL_LINT:\n      switch (state.workers.getIn([workers.WORKER_LINTER, 'status'])) {\n        case workers.READY:\n          log.debug('Starting linter')\n          processes[workers.WORKER_LINTER].send(setLinterGoal(GOAL_LINT))\n          break\n        case workers.DONE:\n          // Next!\n          break\n        case workers.OFFLINE:\n          // Do nothing, since the process is still initializing\n          break\n        default:\n          throw new Error('Unexpected state reached.')\n      }\n      break\n    default:\n      throw new Error('Foreman has no goal')\n  }\n}\n"]}
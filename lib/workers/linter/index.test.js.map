{"version":3,"sources":["../../../src/workers/linter/index.test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AASA,SAAS,gBAAT,EAA2B,YAAM;;AAE/B,MAAM,aAAa,gBAAM,GAAN,EAAb,CAFyB;;AAI/B,MAAM,SAAS,0BAAW,SAAX,EAAsB;AACnC,cAAU,EAAC,WAAW;eAAO,EAAC,gBAAgB,UAAhB;OAAR,EAAtB;GADa,CAAT,CAJyB;;AAQ/B,YAAU,YAAM;AACd,eAAW,KAAX,GADc;GAAN,CAAV,CAR+B;;AAY/B,WAAS,QAAT,EAAmB,YAAM;;AAEvB,OAAG,6BAAH,EAFuB;;AAIvB,OAAG,iDAAH,EAJuB;;AAMvB,OAAG,kDAAH,EANuB;GAAN,CAAnB,CAZ+B;;AAsB/B,WAAS,QAAT,EAAmB,YAAM;;AAEvB,OAAG,iCAAH,EAAsC,gBAAQ;AAC5C,UAAM,kBAAkB,CAAC,uBAAW,IAAX,CAAD,EAAmB,uBAAW,KAAX,CAAnB,CAAlB,CADsC;AAE5C,UAAM,QAAQ,qBAAU,EAAV,EAAc,eAAd,EAA+B,IAA/B,CAAR,CAFsC;;AAI5C,aAAO,IAAP,CAAY,KAAZ,EAJ4C;;AAM5C,wBAAO,QAAQ,IAAR,CAAP,CAAqB,EAArB,CAAwB,IAAxB,CAA6B,IAA7B,CAAkC,UAAlC,CAA6C,gDAA7C,EAN4C;AAO5C,wBAAO,QAAQ,IAAR,CAAP,CAAqB,EAArB,CAAwB,IAAxB,CAA6B,IAA7B,CAAkC,UAAlC,CAA6C,iDAA7C,EAP4C;KAAR,CAAtC,CAFuB;;AAYvB,OAAG,oDAAH,EAZuB;;AAcvB,OAAG,8CAAH,EAduB;GAAN,CAAnB,CAtB+B;;AAwC/B,WAAS,gBAAT,EAA2B,YAAM;;AAE/B,aAAS,WAAT,EAAsB,YAAM;;AAE1B,SAAG,iBAAH,EAAsB,YAAM;AAC1B,YAAM,QAAQ;AACZ,oBAAU,oBAAM,EAAN;AACV,oBAAU;mBAAO;AACf,sBAAQ,uBAAO,EAAC,wBAAD,EAAkB,YAAY,KAAZ,EAAzB,CAAR;;WADQ;SAFN,CADoB;;AAQ1B,eAAO,YAAP,CAAoB,KAApB,EAR0B;;AAU1B,0BAAO,UAAP,EAAmB,EAAnB,CAAsB,IAAtB,CAA2B,IAA3B,CAAgC,UAAhC,CAA2C,CAAC,KAAD,CAA3C,EAV0B;OAAN,CAAtB,CAF0B;KAAN,CAAtB,CAF+B;GAAN,CAA3B,CAxC+B;CAAN,CAA3B","file":"index.test.js","sourcesContent":["import {expect} from 'chai'\nimport {fromJS} from 'immutable'\nimport {GOAL_LINT} from 'state/foreman'\nimport {inProgress} from 'workers/linter/state'\nimport {mockStore} from 'utils/test'\nimport {workerBusy, workerReady, WORKER_LINTER} from 'state/workers'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\ndescribe('workers/linter', () => {\n\n  const linterStub = sinon.spy()\n\n  const linter = proxyquire('./index', {\n    'eslint': {CLIEngine: () => ({executeOnFiles: linterStub})},\n  })\n\n  afterEach(() => {\n    linterStub.reset()\n  })\n\n  describe('init()', () => {\n\n    it('subscribes to state changes')\n\n    it('dispatches actions from parent process messages')\n\n    it('sends a ready message back to the parent process')\n\n  })\n\n  describe('lint()', () => {\n\n    it('updates status before and after', done => {\n      const expectedActions = [inProgress(true), inProgress(false)]\n      const store = mockStore({}, expectedActions, done)\n\n      linter.lint(store)\n\n      expect(process.send).to.have.been.calledWith(workerBusy(WORKER_LINTER))\n      expect(process.send).to.have.been.calledWith(workerReady(WORKER_LINTER))\n    })\n\n    it('runs linter.executeOnFiles on the source directory')\n\n    it('reports the results in a log grouped by file')\n\n  })\n\n  describe('stateChanged()', () => {\n\n    describe('GOAL_LINT', () => {\n\n      it('runs the linter', () => {\n        const store = {\n          dispatch: () => {},\n          getState: () => ({\n            linter: fromJS({goal: GOAL_LINT, inProgress: false}),\n          }),\n        }\n\n        linter.stateChanged(store)\n\n        expect(linterStub).to.have.been.calledWith(['src'])\n      })\n\n    })\n\n  })\n\n})\n"]}
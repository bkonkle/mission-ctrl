{"version":3,"sources":["../../src/workers/transpiler.test.js"],"names":[],"mappings":"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","file":"transpiler.test.js","sourcesContent":["import {busy, ready, WORKER_TRANSPILER} from 'state/workers'\nimport {expect} from 'chai'\nimport {fromJS} from 'immutable'\nimport {mockStore} from 'utils/test'\nimport {started, finish, STATUS_STARTING} from 'state/transpiler'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\ndescribe('workers/transpiler', () => {\n  const dispatchSpy = sinon.spy()\n  const subscribeSpy = sinon.spy()\n  const transpileSpy = sinon.spy()\n\n  const transpiler = proxyquire('./transpiler', {\n    'state/store': {getStore: () => ({\n      dispatch: dispatchSpy,\n      subscribe: subscribeSpy,\n    })},\n    'utils/babel': {transpileToDir: transpileSpy},\n  })\n\n  afterEach(() => {\n    dispatchSpy.reset()\n    subscribeSpy.reset()\n    transpileSpy.reset()\n    process.on.reset()\n    process.send.reset()\n  })\n\n  describe('init', () => {\n\n    it('subscribes to state changes', () => {\n      transpiler.init()\n      expect(subscribeSpy).to.have.been.calledOnceÃŽ\n    })\n\n    it('dispatches actions from parent process messages', () => {\n      const message = 'Test message'\n\n      transpiler.init()\n\n      expect(process.on).to.have.been.calledOnce\n\n      const callback = process.on.firstCall.args[1]\n      callback(message)\n\n      expect(dispatchSpy).to.have.been.calledWith(message)\n    })\n\n    it('sends a ready message back to the parent process', () => {\n      transpiler.init()\n      expect(process.send).to.have.been.calledWith(ready(WORKER_TRANSPILER))\n    })\n\n  })\n\n  describe('transpile()', () => {\n\n    it('reports status to the worker and updates internal status', done => {\n      const expectedActions = [started(), finish()]\n      const store = mockStore({}, expectedActions, done)\n\n      transpiler.transpile(store)\n\n      expect(process.send).to.have.been.calledWith(busy(WORKER_TRANSPILER))\n      expect(process.send).to.have.been.calledWith(ready(WORKER_TRANSPILER))\n    })\n\n  })\n\n  describe('stateChanged()', () => {\n\n    describe('STATUS_STARTING', () => {\n\n      it('runs a transpile', () => {\n        const store = {\n          dispatch: () => {},\n          getState: () => ({\n            transpiler: fromJS({status: STATUS_STARTING}),\n          }),\n        }\n\n        transpiler.stateChanged(store)\n\n        expect(transpileSpy).to.have.been.calledOnce\n      })\n\n      it('dispatches a STARTED event', done => {\n        const initialState = {transpiler: fromJS({status: STATUS_STARTING})}\n        const expectedActions = [started(), finish()]\n        const store = mockStore(initialState, expectedActions, done)\n\n        transpiler.stateChanged(store)\n\n        expect(transpileSpy).to.have.been.calledOnce\n      })\n\n    })\n\n  })\n\n})\n"]}
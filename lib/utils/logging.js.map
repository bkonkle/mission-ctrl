{"version":3,"sources":["../../src/utils/logging.js"],"names":[],"mappings":";;;;kBA4CwB;;;;;;;;;;;;;;;;;;IAvCX;AACX,WADW,WACX,CAAY,KAAZ,EAAmB;0BADR,aACQ;;AACjB,SAAK,KAAL,GAAa,KAAb,CADiB;GAAnB;;AADW,wBAKX,uBAAM,KAAK;;;AACT,QAAM,SAAS,SAAT,MAAS,UAAW;AACxB,UAAI,MAAK,KAAL,GAAa,iBAAO,IAAP,EAAa;AAC5B,qBAAW,gBAAM,IAAN,CAAW,IAAI,IAAJ,WAAc,OAApC,CAD4B;OAA9B;AAGA,aAAO,OAAP,CAJwB;KAAX,CADN;;AAQT,QAAI,IAAI,KAAJ,GAAY,iBAAO,IAAP,EAAa;AAC3B,cAAQ,GAAR,CAAY,OAAO,IAAI,GAAJ,CAAnB,EAD2B;KAA7B,MAEO,IAAI,IAAI,KAAJ,GAAY,iBAAO,IAAP,EAAa;AAClC,cAAQ,IAAR,CAAa,OAAO,IAAI,GAAJ,CAApB,EADkC;KAA7B,MAEA,IAAI,IAAI,KAAJ,GAAY,iBAAO,KAAP,EAAc;AACnC,UAAI,OAAO,IAAI,GAAJ,KAAY,QAAnB,EAA6B;AAC/B,YAAI,GAAJ,GAAU,gBAAM,MAAN,CAAa,IAAI,GAAJ,CAAvB,CAD+B;OAAjC;AAGA,cAAQ,IAAR,CAAa,OAAO,IAAI,GAAJ,CAApB,EAJmC;KAA9B,MAKA;AACL,UAAI,OAAO,IAAI,GAAJ,KAAY,QAAnB,EAA6B;AAC/B,YAAI,GAAJ,GAAU,gBAAM,GAAN,CAAU,IAAI,GAAJ,CAApB,CAD+B;OAAjC;AAGA,cAAQ,KAAR,CAAc,OAAO,IAAI,GAAJ,CAArB,EAJK;KALA;;;SAjBE;;;;;;;;;;;;AAuCE,SAAS,YAAT,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC;AAChD,MAAM,SAAS,uBAAT,CAD0C;;AAGhD,MAAI,WAAW,iBAAO,IAAP,CAHiC;AAIhD,MAAI,OAAO,OAAP,EAAgB;AAClB,eAAW,iBAAO,KAAP,CADO;GAApB,MAEO,IAAI,OAAO,KAAP,EAAc;AACvB,eAAW,iBAAO,IAAP,CADY;GAAlB,MAEA,IAAI,OAAO,MAAP,EAAe;AACxB,eAAW,iBAAO,KAAP,CADa;GAAnB;;AAIP,MAAM,WAAW;AACf,cADe;AAEf,aAAS,CACP;AACE,aAAO,SAAS,QAAT;AACP,YAAM,KAAN;AACA,cAAQ,IAAI,WAAJ,CAAgB,SAAS,QAAT,CAAxB;KAJK,CAAT;GAFI,CAZ0C;;AAuBhD,SAAO,iBAAO,YAAP,CAAoB,QAApB,CAAP,CAvBgD;CAAnC","file":"logging.js","sourcesContent":["/* eslint no-console:0 */\nimport bunyan from 'bunyan'\nimport chalk from 'chalk'\nimport getConfig from './config'\n\nexport class PlainStream {\n  constructor(level) {\n    this.level = level\n  }\n\n  write(rec) {\n    const prefix = message => {\n      if (this.level < bunyan.INFO) {\n        return `[${chalk.blue(rec.name)}] ${message}`\n      }\n      return message\n    }\n\n    if (rec.level < bunyan.INFO) {\n      console.log(prefix(rec.msg))\n    } else if (rec.level < bunyan.WARN) {\n      console.info(prefix(rec.msg))\n    } else if (rec.level < bunyan.ERROR) {\n      if (typeof rec.msg === 'string') {\n        rec.msg = chalk.yellow(rec.msg)\n      }\n      console.warn(prefix(rec.msg))\n    } else {\n      if (typeof rec.msg === 'string') {\n        rec.msg = chalk.red(rec.msg)\n      }\n      console.error(prefix(rec.msg))\n    }\n  }\n}\n\n/**\n * Create a logger with the given name.\n *\n * @param {String} name - the name for the logger (usually the module being\n *                        logged in)\n * @param {Number} [level] - an optional override for the loglevel\n * @return {Object} - the bunyan logger object\n */\nexport default function createLogger(name, level) {\n  const config = getConfig()\n\n  let loglevel = bunyan.INFO\n  if (config.verbose) {\n    loglevel = bunyan.DEBUG\n  } else if (config.quiet) {\n    loglevel = bunyan.WARN\n  } else if (config.silent) {\n    loglevel = bunyan.ERROR\n  }\n\n  const settings = {\n    name,\n    streams: [\n      {\n        level: level || loglevel,\n        type: 'raw',\n        stream: new PlainStream(level || loglevel),\n      },\n    ],\n  }\n\n  return bunyan.createLogger(settings)\n}\n"]}
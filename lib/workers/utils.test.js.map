{"version":3,"sources":["../../src/workers/utils.test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAKA,SAAS,eAAT,EAA0B,YAAM;;AAE9B,MAAM,cAAc,gBAAM,GAAN,EAAd,CAFwB;AAG9B,MAAM,eAAe,gBAAM,GAAN,EAAf,CAHwB;AAI9B,MAAM,YAAY,EAAC,UAAU,WAAV,EAAuB,WAAW,YAAX,EAApC,CAJwB;;AAM9B,MAAM,YAAY,0BAAW,SAAX,EAAsB;AACtC,mBAAe,EAAC,UAAU;eAAM;OAAN,EAA1B;GADgB,CAAZ,CANwB;;AAU9B,aAAW,YAAM;AACf,gBAAY,KAAZ,GADe;AAEf,iBAAa,KAAb,GAFe;AAGf,YAAQ,EAAR,CAAW,KAAX,GAHe;AAIf,YAAQ,IAAR,CAAa,KAAb,GAJe;GAAN,CAAX,CAV8B;;AAiB9B,WAAS,cAAT,EAAyB,YAAM;;AAE7B,OAAG,6BAAH,EAAkC,YAAM;AACtC,UAAM,WAAW,gBAAM,GAAN,EAAX,CADgC;AAEtC,gBAAU,UAAV,2BAAwC,QAAxC,IAFsC;AAGtC,wBAAO,YAAP,EAAqB,EAArB,CAAwB,IAAxB,CAA6B,IAA7B,CAAkC,UAAlC,CAHsC;KAAN,CAAlC,CAF6B;;AAQ7B,OAAG,iDAAH,EAAsD,YAAM;AAC1D,UAAM,WAAW,gBAAM,GAAN,EAAX,CADoD;AAE1D,UAAM,UAAU,EAAC,MAAM,sBAAN,EAAX,CAFoD;;AAI1D,gBAAU,UAAV,2BAAwC,QAAxC,IAJ0D;;AAM1D,wBAAO,QAAQ,EAAR,CAAP,CAAmB,EAAnB,CAAsB,IAAtB,CAA2B,IAA3B,CAAgC,UAAhC,CAN0D;AAO1D,UAAM,KAAK,QAAQ,EAAR,CAAW,SAAX,CAAqB,IAArB,CAA0B,CAA1B,CAAL,CAPoD;AAQ1D,SAAG,OAAH,EAR0D;;AAU1D,wBAAO,WAAP,EAAoB,EAApB,CAAuB,IAAvB,CAA4B,IAA5B,CAAiC,UAAjC,CAA4C,OAA5C,EAV0D;KAAN,CAAtD,CAR6B;;AAqB7B,OAAG,kDAAH,EAAuD,YAAM;AAC3D,gBAAU,UAAV,2BAAwC,YAAM,EAAN,CAAxC,GAD2D;AAE3D,wBAAO,QAAQ,IAAR,CAAP,CAAqB,EAArB,CAAwB,IAAxB,CAA6B,IAA7B,CAAkC,UAAlC,CAA6C,iDAA7C,EAF2D;KAAN,CAAvD,CArB6B;GAAN,CAAzB,CAjB8B;CAAN,CAA1B","file":"utils.test.js","sourcesContent":["import {expect} from 'chai'\nimport {WORKER_TRANSPILER, workerReady} from 'workers/state'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\ndescribe('workers/utils', () => {\n\n  const dispatchSpy = sinon.spy()\n  const subscribeSpy = sinon.spy()\n  const mockStore = {dispatch: dispatchSpy, subscribe: subscribeSpy}\n\n  const testUtils = proxyquire('./utils', {\n    'state/store': {getStore: () => mockStore},\n  })\n\n  beforeEach(() => {\n    dispatchSpy.reset()\n    subscribeSpy.reset()\n    process.on.reset()\n    process.send.reset()\n  })\n\n  describe('workerInit()', () => {\n\n    it('subscribes to state changes', () => {\n      const callback = sinon.spy()\n      testUtils.workerInit(WORKER_TRANSPILER, callback)()\n      expect(subscribeSpy).to.have.been.calledOnce\n    })\n\n    it('dispatches actions from parent process messages', () => {\n      const callback = sinon.spy()\n      const message = {type: 'ship-yard/utils/TEST'}\n\n      testUtils.workerInit(WORKER_TRANSPILER, callback)()\n\n      expect(process.on).to.have.been.calledOnce\n      const cb = process.on.firstCall.args[1]\n      cb(message)\n\n      expect(dispatchSpy).to.have.been.calledWith(message)\n    })\n\n    it('sends a ready message back to the parent process', () => {\n      testUtils.workerInit(WORKER_TRANSPILER, () => {})()\n      expect(process.send).to.have.been.calledWith(workerReady(WORKER_TRANSPILER))\n    })\n\n  })\n\n})\n"]}
{"version":3,"sources":["../../src/utils/babel.test.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,SAAS,aAAT,EAAwB,YAAM;AAC5B,MAAM,OAAO,qBAAP,CADsB;AAE5B,MAAM,YAAY,CAAC,mBAAD,EAAsB,wBAAtB,CAAZ,CAFsB;AAG5B,MAAM,UAAU,EAAC,SAAS,WAAT,EAAsB,oBAAvB,EAAkC,QAAQ,aAAR,EAA5C,CAHsB;AAI5B,MAAM,UAAU,qBAAV,CAJsB;AAK5B,MAAM,UAAU,mBAAV,CALsB;;AAO5B,MAAM,WAAW,gBAAM,GAAN,EAAX,CAPsB;AAQ5B,MAAM,YAAY,gBAAM,GAAN,EAAZ,CARsB;AAS5B,MAAM,eAAe,gBAAM,IAAN,EAAf,CATsB;AAU5B,MAAM,WAAW,gBAAM,IAAN,EAAX,CAVsB;AAW5B,MAAM,gBAAgB,gBAAM,IAAN,EAAhB,CAXsB;;AAa5B,MAAM,aAAa,0BAAW,SAAX,EAAsB;AACvC,kBAAc,EAAC,mBAAmB,aAAnB,EAAf;AACA,UAAM,EAAC,WAAW,QAAX,EAAqB,cAAc,YAAd,EAA4B,UAAU,QAAV,EAAxD;AACA,gBAAY,EAAC,eAAe,SAAf,EAAb;GAHiB,CAAb,CAbsB;;AAmB5B,aAAW,YAAM;AACf,aAAS,KAAT,GADe;AAEf,cAAU,KAAV,GAFe;AAGf,iBAAa,KAAb,GAAqB,OAArB,CAA6B,OAA7B,EAHe;AAIf,aAAS,KAAT,GAAiB,OAAjB,CAAyB,EAAC,MAAM,MAAN,EAA1B,EAJe;AAKf,kBAAc,KAAd,GAAsB,OAAtB,CAA8B,EAAC,MAAM,OAAN,EAA/B,EALe;GAAN,CAAX,CAnB4B;;AA2B5B,WAAS,aAAT,EAAwB,YAAM;;AAE5B,OAAG,0EAAH,EAA+E,YAAM;AACnF,iBAAW,SAAX,CAAqB,OAArB,EADmF;;AAGnF,wBAAO,aAAP,EAAsB,EAAtB,CAAyB,IAAzB,CAA8B,IAA9B,CAAmC,WAAnC,CAHmF;;AAKnF,UAAM,OAAO,cAAc,SAAd,CAAwB,IAAxB,CALsE;AAMnF,wBAAO,KAAK,CAAL,CAAP,EAAgB,EAAhB,CAAmB,KAAnB,CAAyB,mBAAzB,EANmF;AAOnF,wBAAO,KAAK,CAAL,CAAP,EAAgB,EAAhB,CAAmB,IAAnB,CAAwB,QAAxB,CAAiC,gBAAjC,EAAmD,gBAAnD,EAPmF;AAQnF,wBAAO,KAAK,CAAL,CAAP,EAAgB,EAAhB,CAAmB,IAAnB,CAAwB,QAAxB,CAAiC,iBAAjC,EAAoD,SAApD,EARmF;KAAN,CAA/E,CAF4B;;AAa5B,OAAG,uCAAH,EAA4C,YAAM;AAChD,iBAAW,SAAX,CAAqB,OAArB,EADgD;;AAGhD,wBAAO,SAAP,EAAkB,EAAlB,CAAqB,IAArB,CAA0B,SAA1B,CAAoC,CAApC,EAHgD;AAIhD,wBAAO,SAAP,EAAkB,EAAlB,CAAqB,IAArB,CAA0B,IAA1B,CAA+B,UAA/B,CAA0C,IAA1C,EAAmD,8CAAnD,EAJgD;KAAN,CAA5C,CAb4B;GAAN,CAAxB,CA3B4B;CAAN,CAAxB","file":"babel.test.js","sourcesContent":["import {expect} from 'chai'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\ndescribe('utils/babel', () => {\n  const dest = '/test/build/file.js'\n  const filenames = ['/test/src/file.js', '/test/src/file.test.js']\n  const options = {baseDir: '/test/src', filenames, outDir: '/test/build'}\n  const codeEs6 = 'const CODE = \"CODE\"'\n  const codeEs5 = 'var CODE = \"CODE\"'\n\n  const chmodSpy = sinon.spy()\n  const outputSpy = sinon.spy()\n  const readFileStub = sinon.stub()\n  const statStub = sinon.stub()\n  const transformStub = sinon.stub()\n\n  const babelUtils = proxyquire('./babel', {\n    'babel-core': {transformFileSync: transformStub},\n    'fs': {chmodSync: chmodSpy, readFileSync: readFileStub, statSync: statStub},\n    'utils/fs': {outputToMemFs: outputSpy},\n  })\n\n  beforeEach(() => {\n    chmodSpy.reset()\n    outputSpy.reset()\n    readFileStub.reset().returns(codeEs6)\n    statStub.reset().returns({mode: 'test'})\n    transformStub.reset().returns({code: codeEs5})\n  })\n\n  describe('transpile()', () => {\n\n    it('calls transformFileSync() with an appropriate source file and map target', () => {\n      babelUtils.transpile(options)\n\n      expect(transformStub).to.have.been.calledTwice\n\n      const args = transformStub.firstCall.args\n      expect(args[0]).to.equal('/test/src/file.js')\n      expect(args[1]).to.have.property('sourceFileName', '../src/file.js')\n      expect(args[1]).to.have.property('sourceMapTarget', 'file.js')\n    })\n\n    it('calls outputFileSync with the results', () => {\n      babelUtils.transpile(options)\n\n      expect(outputSpy).to.have.callCount(4)\n      expect(outputSpy).to.have.been.calledWith(dest, `${codeEs5}\\n//# sourceMappingURL=file.js.map`)\n    })\n\n  })\n\n})\n"]}
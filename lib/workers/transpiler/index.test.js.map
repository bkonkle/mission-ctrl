{"version":3,"sources":["../../../src/workers/transpiler/index.test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AASA,SAAS,oBAAT,EAA+B,YAAM;AACnC,MAAM,cAAc,gBAAM,GAAN,EAAd,CAD6B;AAEnC,MAAM,WAAW,gBAAM,IAAN,EAAX,CAF6B;AAGnC,MAAM,UAAU,gBAAM,GAAN,EAAV,CAH6B;AAInC,MAAM,eAAe,gBAAM,GAAN,EAAf,CAJ6B;AAKnC,MAAM,eAAe,gBAAM,GAAN,EAAf,CAL6B;AAMnC,MAAM,WAAW,EAAC,UAAU,WAAV,EAAuB,WAAW,YAAX,EAAnC,CAN6B;;AAQnC,MAAM,aAAa,0BAAW,SAAX,EAAsB;AACvC,YAAQ,EAAC,MAAM,QAAN,EAAT;AACA,mBAAe,EAAC,UAAU;eAAM;OAAN,EAA1B;AACA,mBAAe,EAAC,gBAAgB,YAAhB,EAAhB;AACA,qBAAiB,EAAC,YAAY,OAAZ,EAAlB;GAJiB,CAAb,CAR6B;;AAenC,aAAW,YAAM;AACf,gBAAY,KAAZ,GADe;AAEf,aAAS,KAAT,GAAiB,OAAjB,CAAyB,CAAC,cAAD,EAAiB,YAAjB,CAAzB,EAFe;AAGf,YAAQ,KAAR,GAHe;AAIf,iBAAa,KAAb,GAJe;AAKf,iBAAa,KAAb,GALe;AAMf,YAAQ,EAAR,CAAW,KAAX,GANe;AAOf,YAAQ,IAAR,CAAa,KAAb,GAPe;GAAN,CAAX,CAfmC;;AAyBnC,WAAS,aAAT,EAAwB,YAAM;;AAE5B,OAAG,0DAAH,EAA+D,gBAAQ;AACrE,UAAM,kBAAkB,CAAC,uBAAW,IAAX,CAAD,EAAmB,uBAAW,KAAX,CAAnB,CAAlB,CAD+D;AAErE,UAAM,QAAQ,qBAAU,EAAV,EAAc,eAAd,EAA+B,IAA/B,CAAR,CAF+D;;AAIrE,iBAAW,SAAX,CAAqB,KAArB,EAJqE;;AAMrE,wBAAO,QAAQ,IAAR,CAAP,CAAqB,EAArB,CAAwB,IAAxB,CAA6B,IAA7B,CAAkC,UAAlC,CAA6C,kDAA7C,EANqE;AAOrE,wBAAO,QAAQ,IAAR,CAAP,CAAqB,EAArB,CAAwB,IAAxB,CAA6B,IAA7B,CAAkC,UAAlC,CAA6C,mDAA7C,EAPqE;KAAR,CAA/D,CAF4B;;AAY5B,OAAG,qDAAH,EAA0D,gBAAQ;AAChE,UAAM,kBAAkB,CAAC,uBAAW,IAAX,CAAD,EAAmB,uBAAW,KAAX,CAAnB,CAAlB,CAD0D;AAEhE,UAAM,QAAQ,qBAAU,EAAV,EAAc,eAAd,EAA+B,IAA/B,CAAR,CAF0D;;AAIhE,iBAAW,SAAX,CAAqB,KAArB,EAJgE;;AAMhE,wBAAO,YAAP,EAAqB,EAArB,CAAwB,IAAxB,CAA6B,IAA7B,CAAkC,UAAlC,CAA6C;AAC3C,iBAAS,KAAT;AACA,mBAAW,CAAC,cAAD,EAAiB,YAAjB,CAAX;AACA,gBAAQ,OAAR;AACA,oBAAY,IAAZ;OAJF,EANgE;KAAR,CAA1D,CAZ4B;GAAN,CAAxB,CAzBmC;;AAqDnC,WAAS,gBAAT,EAA2B,YAAM;;AAE/B,aAAS,gBAAT,EAA2B,YAAM;;AAE/B,SAAG,kBAAH,EAAuB,YAAM;AAC3B,YAAM,QAAQ;AACZ,oBAAU,oBAAM,EAAN;AACV,oBAAU;mBAAO;AACf,0BAAY,uBAAO,EAAC,6BAAD,EAAuB,YAAY,KAAZ,EAA9B,CAAZ;;WADQ;SAFN,CADqB;;AAQ3B,mBAAW,YAAX,CAAwB,KAAxB,EAR2B;;AAU3B,0BAAO,YAAP,EAAqB,EAArB,CAAwB,IAAxB,CAA6B,IAA7B,CAAkC,UAAlC,CAV2B;OAAN,CAAvB,CAF+B;KAAN,CAA3B,CAF+B;GAAN,CAA3B,CArDmC;CAAN,CAA/B","file":"index.test.js","sourcesContent":["import {expect} from 'chai'\nimport {fromJS} from 'immutable'\nimport {GOAL_TRANSPILE} from 'state/foreman'\nimport {inProgress} from 'workers/transpiler/state'\nimport {mockStore} from 'utils/test'\nimport {workerBusy, workerReady, WORKER_TRANSPILER} from 'workers/state'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\ndescribe('workers/transpiler', () => {\n  const dispatchSpy = sinon.spy()\n  const globStub = sinon.stub()\n  const initSpy = sinon.spy()\n  const subscribeSpy = sinon.spy()\n  const transpileSpy = sinon.spy()\n  const storeSpy = {dispatch: dispatchSpy, subscribe: subscribeSpy}\n\n  const transpiler = proxyquire('./index', {\n    'glob': {sync: globStub},\n    'state/store': {getStore: () => storeSpy},\n    'utils/babel': {transpileToDir: transpileSpy},\n    'workers/utils': {workerInit: initSpy},\n  })\n\n  beforeEach(() => {\n    dispatchSpy.reset()\n    globStub.reset().returns(['src/spike.js', 'src/lee.js'])\n    initSpy.reset()\n    subscribeSpy.reset()\n    transpileSpy.reset()\n    process.on.reset()\n    process.send.reset()\n  })\n\n  describe('transpile()', () => {\n\n    it('reports status to the worker and updates internal status', done => {\n      const expectedActions = [inProgress(true), inProgress(false)]\n      const store = mockStore({}, expectedActions, done)\n\n      transpiler.transpile(store)\n\n      expect(process.send).to.have.been.calledWith(workerBusy(WORKER_TRANSPILER))\n      expect(process.send).to.have.been.calledWith(workerReady(WORKER_TRANSPILER))\n    })\n\n    it('calls transpileToDir with the appropriate arguments', done => {\n      const expectedActions = [inProgress(true), inProgress(false)]\n      const store = mockStore({}, expectedActions, done)\n\n      transpiler.transpile(store)\n\n      expect(transpileSpy).to.have.been.calledWith({\n        baseDir: 'src',\n        filenames: ['src/spike.js', 'src/lee.js'],\n        outDir: 'build',\n        sourceMaps: true,\n      })\n    })\n\n  })\n\n  describe('stateChanged()', () => {\n\n    describe('GOAL_TRANSPILE', () => {\n\n      it('runs a transpile', () => {\n        const store = {\n          dispatch: () => {},\n          getState: () => ({\n            transpiler: fromJS({goal: GOAL_TRANSPILE, inProgress: false}),\n          }),\n        }\n\n        transpiler.stateChanged(store)\n\n        expect(transpileSpy).to.have.been.calledOnce\n      })\n\n    })\n\n  })\n\n})\n"]}